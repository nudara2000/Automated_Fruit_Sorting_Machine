
loadcell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800060  00800060  00000b9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c02  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00001f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000580  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <ldexp+0x6>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_clear_bss>:
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	af 37       	cpi	r26, 0x7F	; 127
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  f6:	0c 94 91 05 	jmp	0xb22	; 0xb22 <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <LCD_Command>:
	
}

void LCD_Command(unsigned char command)
{
	Command_Data = ((Command_Data & 0x0F) | (command & 0xF0));//take upper nibble to command register
  fe:	9b b3       	in	r25, 0x1b	; 27
 100:	9f 70       	andi	r25, 0x0F	; 15
 102:	28 2f       	mov	r18, r24
 104:	20 7f       	andi	r18, 0xF0	; 240
 106:	92 2b       	or	r25, r18
 108:	9b bb       	out	0x1b, r25	; 27
	Command_Data &= ~(1<<RS); // select command register
 10a:	9b b3       	in	r25, 0x1b	; 27
 10c:	9d 7f       	andi	r25, 0xFD	; 253
 10e:	9b bb       	out	0x1b, r25	; 27
	Command_Data &= ~(1<<RW); // select write mode
 110:	9b b3       	in	r25, 0x1b	; 27
 112:	9b 7f       	andi	r25, 0xFB	; 251
 114:	9b bb       	out	0x1b, r25	; 27
	Command_Data |= (1<<EN);
 116:	9b b3       	in	r25, 0x1b	; 27
 118:	98 60       	ori	r25, 0x08	; 8
 11a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	35 e0       	ldi	r19, 0x05	; 5
 11e:	3a 95       	dec	r19
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Command+0x20>
 122:	00 00       	nop
	_delay_us(1);
	Command_Data &= ~(1<<EN);
 124:	9b b3       	in	r25, 0x1b	; 27
 126:	97 7f       	andi	r25, 0xF7	; 247
 128:	9b bb       	out	0x1b, r25	; 27
 12a:	ef e1       	ldi	r30, 0x1F	; 31
 12c:	f3 e0       	ldi	r31, 0x03	; 3
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Command+0x30>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_Command+0x36>
 134:	00 00       	nop
	_delay_us(200);
	
	Command_Data = ((Command_Data & 0x0F) | (command << 4));// lower nibble
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	f0 e1       	ldi	r31, 0x10	; 16
 13a:	8f 9f       	mul	r24, r31
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	92 2f       	mov	r25, r18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	8b bb       	out	0x1b, r24	; 27
	Command_Data |= (1<<EN);
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	8b bb       	out	0x1b, r24	; 27
 14e:	35 e0       	ldi	r19, 0x05	; 5
 150:	3a 95       	dec	r19
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Command+0x52>
 154:	00 00       	nop
	_delay_us(1);
	Command_Data &= ~(1<<EN);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	87 7f       	andi	r24, 0xF7	; 247
 15a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9f e1       	ldi	r25, 0x1F	; 31
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Command+0x62>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Command+0x68>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <LCD_Initialization>:
	
}

void LCD_Initialization(void)
{
	Port_Dir = 0xFF;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8a bb       	out	0x1a, r24	; 26
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <LCD_Initialization+0xa>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Initialization+0x14>
 17e:	00 00       	nop
	_delay_ms(20);		// LCD Power ON delay always >15ms
	
	LCD_Command(0x33);
 180:	83 e3       	ldi	r24, 0x33	; 51
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x32);	// Send for 4 bit initialization of LCD
 186:	82 e3       	ldi	r24, 0x32	; 50
 188:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x28);	// 2 line, 5*7 matrix in 4-bit mode
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x0E);	// Display on cursor off
 192:	8e e0       	ldi	r24, 0x0E	; 14
 194:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x06);	//Increment cursor (shift cursor to right)
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x01);	// Clear display screen
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
 1a4:	08 95       	ret

000001a6 <LCD_Display>:



void LCD_Display(unsigned char weight)
{
	Command_Data = ((Command_Data & 0x0F) | (weight & 0xF0));
 1a6:	9b b3       	in	r25, 0x1b	; 27
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	28 2f       	mov	r18, r24
 1ac:	20 7f       	andi	r18, 0xF0	; 240
 1ae:	92 2b       	or	r25, r18
 1b0:	9b bb       	out	0x1b, r25	; 27
	Command_Data |= (1<<RS);
 1b2:	9b b3       	in	r25, 0x1b	; 27
 1b4:	92 60       	ori	r25, 0x02	; 2
 1b6:	9b bb       	out	0x1b, r25	; 27
	Command_Data &= ~(1<<RW);
 1b8:	9b b3       	in	r25, 0x1b	; 27
 1ba:	9b 7f       	andi	r25, 0xFB	; 251
 1bc:	9b bb       	out	0x1b, r25	; 27
	Command_Data |= (1<<EN);
 1be:	9b b3       	in	r25, 0x1b	; 27
 1c0:	98 60       	ori	r25, 0x08	; 8
 1c2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	35 e0       	ldi	r19, 0x05	; 5
 1c6:	3a 95       	dec	r19
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Display+0x20>
 1ca:	00 00       	nop
	
	_delay_us(1);
	Command_Data &= ~(1<<EN);
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	97 7f       	andi	r25, 0xF7	; 247
 1d0:	9b bb       	out	0x1b, r25	; 27
 1d2:	ef e1       	ldi	r30, 0x1F	; 31
 1d4:	f3 e0       	ldi	r31, 0x03	; 3
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Display+0x30>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Display+0x36>
 1dc:	00 00       	nop
	_delay_us(200);
	
	Command_Data = ((Command_Data & 0x0F) | (weight << 4));
 1de:	2b b3       	in	r18, 0x1b	; 27
 1e0:	f0 e1       	ldi	r31, 0x10	; 16
 1e2:	8f 9f       	mul	r24, r31
 1e4:	c0 01       	movw	r24, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	92 2f       	mov	r25, r18
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	89 2b       	or	r24, r25
 1ee:	8b bb       	out	0x1b, r24	; 27
	Command_Data |= (1<<EN);
 1f0:	8b b3       	in	r24, 0x1b	; 27
 1f2:	88 60       	ori	r24, 0x08	; 8
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	35 e0       	ldi	r19, 0x05	; 5
 1f8:	3a 95       	dec	r19
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_Display+0x52>
 1fc:	00 00       	nop
	
	_delay_us(1);
	Command_Data &= ~(1<<EN);
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	87 7f       	andi	r24, 0xF7	; 247
 202:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_Display+0x62>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Display+0x68>
 20e:	00 00       	nop
 210:	08 95       	ret

00000212 <Display>:
void LCD_Command(unsigned char command);
void LCD_Display(unsigned char weight);


void Display(unsigned char weight)
{
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24
	LCD_Initialization();
 216:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_Initialization>
	unsigned char exitkey = '#';
	unsigned char receivekey;
	unsigned char clearkey = '*';
	unsigned int column = 0;

	LCD_Display(weight);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Display>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	83 ed       	ldi	r24, 0xD3	; 211
 224:	90 e3       	ldi	r25, 0x30	; 48
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <Display+0x14>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <Display+0x1e>
 230:	00 00       	nop
	//LCD_Command(0xC0);
	

	
	
}
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <calculation>:
	
	
}//end of MAIN

char calculation()
{
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	int sum = 0;
	
	for(int j=23;j>=0;j--){
 246:	c7 e1       	ldi	r28, 0x17	; 23
 248:	d0 e0       	ldi	r29, 0x00	; 0
	
}//end of MAIN

char calculation()
{
	int sum = 0;
 24a:	00 e0       	ldi	r16, 0x00	; 0
 24c:	10 e0       	ldi	r17, 0x00	; 0
	
	for(int j=23;j>=0;j--){
 24e:	28 c0       	rjmp	.+80     	; 0x2a0 <calculation+0x6a>
		
		if(inputBits[j]=='0')
 250:	fe 01       	movw	r30, r28
 252:	e9 59       	subi	r30, 0x99	; 153
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	80 81       	ld	r24, Z
 258:	80 33       	cpi	r24, 0x30	; 48
 25a:	09 f5       	brne	.+66     	; 0x29e <calculation+0x68>
		{               
			sum=sum + pow(2,(23-j))*1;  
 25c:	67 e1       	ldi	r22, 0x17	; 23
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	6c 1b       	sub	r22, r28
 262:	7d 0b       	sbc	r23, r29
 264:	07 2e       	mov	r0, r23
 266:	00 0c       	add	r0, r0
 268:	88 0b       	sbc	r24, r24
 26a:	99 0b       	sbc	r25, r25
 26c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__floatsisf>
 270:	9b 01       	movw	r18, r22
 272:	ac 01       	movw	r20, r24
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e4       	ldi	r25, 0x40	; 64
 27c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <pow>
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
 284:	b8 01       	movw	r22, r16
 286:	11 0f       	add	r17, r17
 288:	88 0b       	sbc	r24, r24
 28a:	99 0b       	sbc	r25, r25
 28c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__floatsisf>
 290:	a7 01       	movw	r20, r14
 292:	96 01       	movw	r18, r12
 294:	0e 94 be 01 	call	0x37c	; 0x37c <__addsf3>
 298:	0e 94 2a 02 	call	0x454	; 0x454 <__fixsfsi>
 29c:	8b 01       	movw	r16, r22

char calculation()
{
	int sum = 0;
	
	for(int j=23;j>=0;j--){
 29e:	21 97       	sbiw	r28, 0x01	; 1
 2a0:	dd 23       	and	r29, r29
 2a2:	b4 f6       	brge	.-84     	; 0x250 <calculation+0x1a>
			
		}
		
	}
	
	double decimalOutput=sum+1.0;
 2a4:	b8 01       	movw	r22, r16
 2a6:	11 0f       	add	r17, r17
 2a8:	88 0b       	sbc	r24, r24
 2aa:	99 0b       	sbc	r25, r25
 2ac:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__floatsisf>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e8       	ldi	r20, 0x80	; 128
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 be 01 	call	0x37c	; 0x37c <__addsf3>
	double finalValue=calibrationFactor*decimalOutput;
 2bc:	24 eb       	ldi	r18, 0xB4	; 180
 2be:	32 ea       	ldi	r19, 0xA2	; 162
 2c0:	48 ee       	ldi	r20, 0xE8	; 232
 2c2:	57 e3       	ldi	r21, 0x37	; 55
 2c4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__mulsf3>
	int roundFinalValue=round(finalValue);
 2c8:	0e 94 ab 03 	call	0x756	; 0x756 <round>
 2cc:	0e 94 2a 02 	call	0x454	; 0x454 <__fixsfsi>
 2d0:	86 2f       	mov	r24, r22
			_delay_ms(10);
			
		}
	}
	return count;
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	08 95       	ret

000002e4 <main>:
	char digitAmount;
	
int main(void)
{
    
	DDRD &= ~(1<<PD1);//make port input..DOUT
 2e4:	81 b3       	in	r24, 0x11	; 17
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<PD0);//make port output...PD_SCK
 2ea:	81 b3       	in	r24, 0x11	; 17
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PD1);
 2f0:	82 b3       	in	r24, 0x12	; 18
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	82 bb       	out	0x12, r24	; 18

	
	
	while(1)
	{
		for(int pulse=0;pulse<25;pulse++)
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	22 c0       	rjmp	.+68     	; 0x340 <main+0x5c>
		{
			PORTD |= (1<<PD0);
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	21 60       	ori	r18, 0x01	; 1
 300:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	2a e0       	ldi	r18, 0x0A	; 10
 304:	2a 95       	dec	r18
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0x20>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x26>
			_delay_us(2);
			PORTD &= ~(1<<PD0);
 30a:	22 b3       	in	r18, 0x12	; 18
 30c:	2e 7f       	andi	r18, 0xFE	; 254
 30e:	22 bb       	out	0x12, r18	; 18
 310:	2a e0       	ldi	r18, 0x0A	; 10
 312:	2a 95       	dec	r18
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x2e>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x34>
			_delay_us(2);
			
			if(!(~PIND & (1<<PD1)) ) 
 318:	81 9b       	sbis	0x10, 1	; 16
 31a:	04 c0       	rjmp	.+8      	; 0x324 <main+0x40>
			{
				holder ='1';
 31c:	21 e3       	ldi	r18, 0x31	; 49
 31e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 322:	03 c0       	rjmp	.+6      	; 0x32a <main+0x46>
			}
			else
			{
				holder = '0';
 324:	20 e3       	ldi	r18, 0x30	; 48
 326:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			inputBits[pulse] = holder;
 32a:	fc 01       	movw	r30, r24
 32c:	e9 59       	subi	r30, 0x99	; 153
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 334:	20 83       	st	Z, r18
 336:	25 e0       	ldi	r18, 0x05	; 5
 338:	2a 95       	dec	r18
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x54>
 33c:	00 00       	nop

	
	
	while(1)
	{
		for(int pulse=0;pulse<25;pulse++)
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	89 31       	cpi	r24, 0x19	; 25
 342:	91 05       	cpc	r25, r1
 344:	dc f2       	brlt	.-74     	; 0x2fc <main+0x18>
			inputBits[pulse] = holder;
			_delay_us(1);
			
		}//end of FOR LOOP
		
		PORTD |= (1<<PD0);		//25th pulse
 346:	82 b3       	in	r24, 0x12	; 18
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	82 bb       	out	0x12, r24	; 18
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x6a>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x70>
		_delay_us(2);				//DOUT pin back to high
		PORTD &= (~(1<<PD0));
 354:	82 b3       	in	r24, 0x12	; 18
 356:	8e 7f       	andi	r24, 0xFE	; 254
 358:	82 bb       	out	0x12, r24	; 18
		//_delay_ms(2);
		
		digitAmount=calculation();
 35a:	0e 94 1b 01 	call	0x236	; 0x236 <calculation>
 35e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <digitAmount>
		Display(digitAmount);
 362:	0e 94 09 01 	call	0x212	; 0x212 <Display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	9f ef       	ldi	r25, 0xFF	; 255
 368:	23 ed       	ldi	r18, 0xD3	; 211
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	91 50       	subi	r25, 0x01	; 1
 36e:	20 40       	sbci	r18, 0x00	; 0
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x88>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x92>
 376:	00 00       	nop
 378:	be cf       	rjmp	.-132    	; 0x2f6 <main+0x12>

0000037a <__subsf3>:
 37a:	50 58       	subi	r21, 0x80	; 128

0000037c <__addsf3>:
 37c:	bb 27       	eor	r27, r27
 37e:	aa 27       	eor	r26, r26
 380:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__addsf3x>
 384:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_round>
 388:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_pscA>
 38c:	38 f0       	brcs	.+14     	; 0x39c <__addsf3+0x20>
 38e:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_pscB>
 392:	20 f0       	brcs	.+8      	; 0x39c <__addsf3+0x20>
 394:	39 f4       	brne	.+14     	; 0x3a4 <__addsf3+0x28>
 396:	9f 3f       	cpi	r25, 0xFF	; 255
 398:	19 f4       	brne	.+6      	; 0x3a0 <__addsf3+0x24>
 39a:	26 f4       	brtc	.+8      	; 0x3a4 <__addsf3+0x28>
 39c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>
 3a0:	0e f4       	brtc	.+2      	; 0x3a4 <__addsf3+0x28>
 3a2:	e0 95       	com	r30
 3a4:	e7 fb       	bst	r30, 7
 3a6:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>

000003aa <__addsf3x>:
 3aa:	e9 2f       	mov	r30, r25
 3ac:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_split3>
 3b0:	58 f3       	brcs	.-42     	; 0x388 <__addsf3+0xc>
 3b2:	ba 17       	cp	r27, r26
 3b4:	62 07       	cpc	r22, r18
 3b6:	73 07       	cpc	r23, r19
 3b8:	84 07       	cpc	r24, r20
 3ba:	95 07       	cpc	r25, r21
 3bc:	20 f0       	brcs	.+8      	; 0x3c6 <__addsf3x+0x1c>
 3be:	79 f4       	brne	.+30     	; 0x3de <__addsf3x+0x34>
 3c0:	a6 f5       	brtc	.+104    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3c2:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_zero>
 3c6:	0e f4       	brtc	.+2      	; 0x3ca <__addsf3x+0x20>
 3c8:	e0 95       	com	r30
 3ca:	0b 2e       	mov	r0, r27
 3cc:	ba 2f       	mov	r27, r26
 3ce:	a0 2d       	mov	r26, r0
 3d0:	0b 01       	movw	r0, r22
 3d2:	b9 01       	movw	r22, r18
 3d4:	90 01       	movw	r18, r0
 3d6:	0c 01       	movw	r0, r24
 3d8:	ca 01       	movw	r24, r20
 3da:	a0 01       	movw	r20, r0
 3dc:	11 24       	eor	r1, r1
 3de:	ff 27       	eor	r31, r31
 3e0:	59 1b       	sub	r21, r25
 3e2:	99 f0       	breq	.+38     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3e4:	59 3f       	cpi	r21, 0xF9	; 249
 3e6:	50 f4       	brcc	.+20     	; 0x3fc <__addsf3x+0x52>
 3e8:	50 3e       	cpi	r21, 0xE0	; 224
 3ea:	68 f1       	brcs	.+90     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3ec:	1a 16       	cp	r1, r26
 3ee:	f0 40       	sbci	r31, 0x00	; 0
 3f0:	a2 2f       	mov	r26, r18
 3f2:	23 2f       	mov	r18, r19
 3f4:	34 2f       	mov	r19, r20
 3f6:	44 27       	eor	r20, r20
 3f8:	58 5f       	subi	r21, 0xF8	; 248
 3fa:	f3 cf       	rjmp	.-26     	; 0x3e2 <__addsf3x+0x38>
 3fc:	46 95       	lsr	r20
 3fe:	37 95       	ror	r19
 400:	27 95       	ror	r18
 402:	a7 95       	ror	r26
 404:	f0 40       	sbci	r31, 0x00	; 0
 406:	53 95       	inc	r21
 408:	c9 f7       	brne	.-14     	; 0x3fc <__addsf3x+0x52>
 40a:	7e f4       	brtc	.+30     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 40c:	1f 16       	cp	r1, r31
 40e:	ba 0b       	sbc	r27, r26
 410:	62 0b       	sbc	r22, r18
 412:	73 0b       	sbc	r23, r19
 414:	84 0b       	sbc	r24, r20
 416:	ba f0       	brmi	.+46     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	a1 f0       	breq	.+40     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 41c:	ff 0f       	add	r31, r31
 41e:	bb 1f       	adc	r27, r27
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	c2 f7       	brpl	.-16     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 428:	0e c0       	rjmp	.+28     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 42a:	ba 0f       	add	r27, r26
 42c:	62 1f       	adc	r22, r18
 42e:	73 1f       	adc	r23, r19
 430:	84 1f       	adc	r24, r20
 432:	48 f4       	brcc	.+18     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 434:	87 95       	ror	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b7 95       	ror	r27
 43c:	f7 95       	ror	r31
 43e:	9e 3f       	cpi	r25, 0xFE	; 254
 440:	08 f0       	brcs	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	b0 cf       	rjmp	.-160    	; 0x3a4 <__addsf3+0x28>
 444:	93 95       	inc	r25
 446:	88 0f       	add	r24, r24
 448:	08 f0       	brcs	.+2      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44a:	99 27       	eor	r25, r25
 44c:	ee 0f       	add	r30, r30
 44e:	97 95       	ror	r25
 450:	87 95       	ror	r24
 452:	08 95       	ret

00000454 <__fixsfsi>:
 454:	0e 94 31 02 	call	0x462	; 0x462 <__fixunssfsi>
 458:	68 94       	set
 45a:	b1 11       	cpse	r27, r1
 45c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 460:	08 95       	ret

00000462 <__fixunssfsi>:
 462:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 466:	88 f0       	brcs	.+34     	; 0x48a <__fixunssfsi+0x28>
 468:	9f 57       	subi	r25, 0x7F	; 127
 46a:	98 f0       	brcs	.+38     	; 0x492 <__fixunssfsi+0x30>
 46c:	b9 2f       	mov	r27, r25
 46e:	99 27       	eor	r25, r25
 470:	b7 51       	subi	r27, 0x17	; 23
 472:	b0 f0       	brcs	.+44     	; 0x4a0 <__fixunssfsi+0x3e>
 474:	e1 f0       	breq	.+56     	; 0x4ae <__fixunssfsi+0x4c>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	1a f0       	brmi	.+6      	; 0x486 <__fixunssfsi+0x24>
 480:	ba 95       	dec	r27
 482:	c9 f7       	brne	.-14     	; 0x476 <__fixunssfsi+0x14>
 484:	14 c0       	rjmp	.+40     	; 0x4ae <__fixunssfsi+0x4c>
 486:	b1 30       	cpi	r27, 0x01	; 1
 488:	91 f0       	breq	.+36     	; 0x4ae <__fixunssfsi+0x4c>
 48a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_zero>
 48e:	b1 e0       	ldi	r27, 0x01	; 1
 490:	08 95       	ret
 492:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_zero>
 496:	67 2f       	mov	r22, r23
 498:	78 2f       	mov	r23, r24
 49a:	88 27       	eor	r24, r24
 49c:	b8 5f       	subi	r27, 0xF8	; 248
 49e:	39 f0       	breq	.+14     	; 0x4ae <__fixunssfsi+0x4c>
 4a0:	b9 3f       	cpi	r27, 0xF9	; 249
 4a2:	cc f3       	brlt	.-14     	; 0x496 <__fixunssfsi+0x34>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b3 95       	inc	r27
 4ac:	d9 f7       	brne	.-10     	; 0x4a4 <__fixunssfsi+0x42>
 4ae:	3e f4       	brtc	.+14     	; 0x4be <__fixunssfsi+0x5c>
 4b0:	90 95       	com	r25
 4b2:	80 95       	com	r24
 4b4:	70 95       	com	r23
 4b6:	61 95       	neg	r22
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <__floatunsisf>:
 4c0:	e8 94       	clt
 4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__floatsisf+0x12>

000004c4 <__floatsisf>:
 4c4:	97 fb       	bst	r25, 7
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__floatsisf+0x12>
 4c8:	90 95       	com	r25
 4ca:	80 95       	com	r24
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	99 23       	and	r25, r25
 4d8:	a9 f0       	breq	.+42     	; 0x504 <__floatsisf+0x40>
 4da:	f9 2f       	mov	r31, r25
 4dc:	96 e9       	ldi	r25, 0x96	; 150
 4de:	bb 27       	eor	r27, r27
 4e0:	93 95       	inc	r25
 4e2:	f6 95       	lsr	r31
 4e4:	87 95       	ror	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b7 95       	ror	r27
 4ec:	f1 11       	cpse	r31, r1
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <__floatsisf+0x1c>
 4f0:	fa f4       	brpl	.+62     	; 0x530 <__floatsisf+0x6c>
 4f2:	bb 0f       	add	r27, r27
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__floatsisf+0x36>
 4f6:	60 ff       	sbrs	r22, 0
 4f8:	1b c0       	rjmp	.+54     	; 0x530 <__floatsisf+0x6c>
 4fa:	6f 5f       	subi	r22, 0xFF	; 255
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	16 c0       	rjmp	.+44     	; 0x530 <__floatsisf+0x6c>
 504:	88 23       	and	r24, r24
 506:	11 f0       	breq	.+4      	; 0x50c <__floatsisf+0x48>
 508:	96 e9       	ldi	r25, 0x96	; 150
 50a:	11 c0       	rjmp	.+34     	; 0x52e <__floatsisf+0x6a>
 50c:	77 23       	and	r23, r23
 50e:	21 f0       	breq	.+8      	; 0x518 <__floatsisf+0x54>
 510:	9e e8       	ldi	r25, 0x8E	; 142
 512:	87 2f       	mov	r24, r23
 514:	76 2f       	mov	r23, r22
 516:	05 c0       	rjmp	.+10     	; 0x522 <__floatsisf+0x5e>
 518:	66 23       	and	r22, r22
 51a:	71 f0       	breq	.+28     	; 0x538 <__floatsisf+0x74>
 51c:	96 e8       	ldi	r25, 0x86	; 134
 51e:	86 2f       	mov	r24, r22
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	2a f0       	brmi	.+10     	; 0x530 <__floatsisf+0x6c>
 526:	9a 95       	dec	r25
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	da f7       	brpl	.-10     	; 0x526 <__floatsisf+0x62>
 530:	88 0f       	add	r24, r24
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__fp_inf>:
 53a:	97 f9       	bld	r25, 7
 53c:	9f 67       	ori	r25, 0x7F	; 127
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	08 95       	ret

00000546 <__fp_nan>:
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	80 ec       	ldi	r24, 0xC0	; 192
 54a:	08 95       	ret

0000054c <__fp_pscA>:
 54c:	00 24       	eor	r0, r0
 54e:	0a 94       	dec	r0
 550:	16 16       	cp	r1, r22
 552:	17 06       	cpc	r1, r23
 554:	18 06       	cpc	r1, r24
 556:	09 06       	cpc	r0, r25
 558:	08 95       	ret

0000055a <__fp_pscB>:
 55a:	00 24       	eor	r0, r0
 55c:	0a 94       	dec	r0
 55e:	12 16       	cp	r1, r18
 560:	13 06       	cpc	r1, r19
 562:	14 06       	cpc	r1, r20
 564:	05 06       	cpc	r0, r21
 566:	08 95       	ret

00000568 <__fp_round>:
 568:	09 2e       	mov	r0, r25
 56a:	03 94       	inc	r0
 56c:	00 0c       	add	r0, r0
 56e:	11 f4       	brne	.+4      	; 0x574 <__fp_round+0xc>
 570:	88 23       	and	r24, r24
 572:	52 f0       	brmi	.+20     	; 0x588 <__fp_round+0x20>
 574:	bb 0f       	add	r27, r27
 576:	40 f4       	brcc	.+16     	; 0x588 <__fp_round+0x20>
 578:	bf 2b       	or	r27, r31
 57a:	11 f4       	brne	.+4      	; 0x580 <__fp_round+0x18>
 57c:	60 ff       	sbrs	r22, 0
 57e:	04 c0       	rjmp	.+8      	; 0x588 <__fp_round+0x20>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	08 95       	ret

0000058a <__fp_split3>:
 58a:	57 fd       	sbrc	r21, 7
 58c:	90 58       	subi	r25, 0x80	; 128
 58e:	44 0f       	add	r20, r20
 590:	55 1f       	adc	r21, r21
 592:	59 f0       	breq	.+22     	; 0x5aa <__fp_splitA+0x10>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	71 f0       	breq	.+28     	; 0x5b4 <__fp_splitA+0x1a>
 598:	47 95       	ror	r20

0000059a <__fp_splitA>:
 59a:	88 0f       	add	r24, r24
 59c:	97 fb       	bst	r25, 7
 59e:	99 1f       	adc	r25, r25
 5a0:	61 f0       	breq	.+24     	; 0x5ba <__fp_splitA+0x20>
 5a2:	9f 3f       	cpi	r25, 0xFF	; 255
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <__fp_splitA+0x2a>
 5a6:	87 95       	ror	r24
 5a8:	08 95       	ret
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	14 06       	cpc	r1, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	f2 cf       	rjmp	.-28     	; 0x598 <__fp_split3+0xe>
 5b4:	46 95       	lsr	r20
 5b6:	f1 df       	rcall	.-30     	; 0x59a <__fp_splitA>
 5b8:	08 c0       	rjmp	.+16     	; 0x5ca <__fp_splitA+0x30>
 5ba:	16 16       	cp	r1, r22
 5bc:	17 06       	cpc	r1, r23
 5be:	18 06       	cpc	r1, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	f1 cf       	rjmp	.-30     	; 0x5a6 <__fp_splitA+0xc>
 5c4:	86 95       	lsr	r24
 5c6:	71 05       	cpc	r23, r1
 5c8:	61 05       	cpc	r22, r1
 5ca:	08 94       	sec
 5cc:	08 95       	ret

000005ce <__fp_zero>:
 5ce:	e8 94       	clt

000005d0 <__fp_szero>:
 5d0:	bb 27       	eor	r27, r27
 5d2:	66 27       	eor	r22, r22
 5d4:	77 27       	eor	r23, r23
 5d6:	cb 01       	movw	r24, r22
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__mulsf3>:
 5dc:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3x>
 5e0:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_round>
 5e4:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_pscA>
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <__mulsf3+0x1c>
 5ea:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_pscB>
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__mulsf3+0x1c>
 5f0:	95 23       	and	r25, r21
 5f2:	11 f0       	breq	.+4      	; 0x5f8 <__mulsf3+0x1c>
 5f4:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 5f8:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>
 5fc:	11 24       	eor	r1, r1
 5fe:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>

00000602 <__mulsf3x>:
 602:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_split3>
 606:	70 f3       	brcs	.-36     	; 0x5e4 <__mulsf3+0x8>

00000608 <__mulsf3_pse>:
 608:	95 9f       	mul	r25, r21
 60a:	c1 f3       	breq	.-16     	; 0x5fc <__mulsf3+0x20>
 60c:	95 0f       	add	r25, r21
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	55 1f       	adc	r21, r21
 612:	62 9f       	mul	r22, r18
 614:	f0 01       	movw	r30, r0
 616:	72 9f       	mul	r23, r18
 618:	bb 27       	eor	r27, r27
 61a:	f0 0d       	add	r31, r0
 61c:	b1 1d       	adc	r27, r1
 61e:	63 9f       	mul	r22, r19
 620:	aa 27       	eor	r26, r26
 622:	f0 0d       	add	r31, r0
 624:	b1 1d       	adc	r27, r1
 626:	aa 1f       	adc	r26, r26
 628:	64 9f       	mul	r22, r20
 62a:	66 27       	eor	r22, r22
 62c:	b0 0d       	add	r27, r0
 62e:	a1 1d       	adc	r26, r1
 630:	66 1f       	adc	r22, r22
 632:	82 9f       	mul	r24, r18
 634:	22 27       	eor	r18, r18
 636:	b0 0d       	add	r27, r0
 638:	a1 1d       	adc	r26, r1
 63a:	62 1f       	adc	r22, r18
 63c:	73 9f       	mul	r23, r19
 63e:	b0 0d       	add	r27, r0
 640:	a1 1d       	adc	r26, r1
 642:	62 1f       	adc	r22, r18
 644:	83 9f       	mul	r24, r19
 646:	a0 0d       	add	r26, r0
 648:	61 1d       	adc	r22, r1
 64a:	22 1f       	adc	r18, r18
 64c:	74 9f       	mul	r23, r20
 64e:	33 27       	eor	r19, r19
 650:	a0 0d       	add	r26, r0
 652:	61 1d       	adc	r22, r1
 654:	23 1f       	adc	r18, r19
 656:	84 9f       	mul	r24, r20
 658:	60 0d       	add	r22, r0
 65a:	21 1d       	adc	r18, r1
 65c:	82 2f       	mov	r24, r18
 65e:	76 2f       	mov	r23, r22
 660:	6a 2f       	mov	r22, r26
 662:	11 24       	eor	r1, r1
 664:	9f 57       	subi	r25, 0x7F	; 127
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	9a f0       	brmi	.+38     	; 0x690 <__mulsf3_pse+0x88>
 66a:	f1 f0       	breq	.+60     	; 0x6a8 <__mulsf3_pse+0xa0>
 66c:	88 23       	and	r24, r24
 66e:	4a f0       	brmi	.+18     	; 0x682 <__mulsf3_pse+0x7a>
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	bb 1f       	adc	r27, r27
 676:	66 1f       	adc	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	88 1f       	adc	r24, r24
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	a9 f7       	brne	.-22     	; 0x66c <__mulsf3_pse+0x64>
 682:	9e 3f       	cpi	r25, 0xFE	; 254
 684:	51 05       	cpc	r21, r1
 686:	80 f0       	brcs	.+32     	; 0x6a8 <__mulsf3_pse+0xa0>
 688:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 68c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	e4 f3       	brlt	.-8      	; 0x68c <__mulsf3_pse+0x84>
 694:	98 3e       	cpi	r25, 0xE8	; 232
 696:	d4 f3       	brlt	.-12     	; 0x68c <__mulsf3_pse+0x84>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	e7 95       	ror	r30
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	c1 f7       	brne	.-16     	; 0x698 <__mulsf3_pse+0x90>
 6a8:	fe 2b       	or	r31, r30
 6aa:	88 0f       	add	r24, r24
 6ac:	91 1d       	adc	r25, r1
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <pow>:
 6b6:	fa 01       	movw	r30, r20
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	30 96       	adiw	r30, 0x00	; 0
 6be:	21 05       	cpc	r18, r1
 6c0:	31 05       	cpc	r19, r1
 6c2:	a1 f1       	breq	.+104    	; 0x72c <pow+0x76>
 6c4:	61 15       	cp	r22, r1
 6c6:	71 05       	cpc	r23, r1
 6c8:	61 f4       	brne	.+24     	; 0x6e2 <pow+0x2c>
 6ca:	80 38       	cpi	r24, 0x80	; 128
 6cc:	bf e3       	ldi	r27, 0x3F	; 63
 6ce:	9b 07       	cpc	r25, r27
 6d0:	49 f1       	breq	.+82     	; 0x724 <pow+0x6e>
 6d2:	68 94       	set
 6d4:	90 38       	cpi	r25, 0x80	; 128
 6d6:	81 05       	cpc	r24, r1
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <pow+0x3c>
 6da:	80 38       	cpi	r24, 0x80	; 128
 6dc:	bf ef       	ldi	r27, 0xFF	; 255
 6de:	9b 07       	cpc	r25, r27
 6e0:	41 f0       	breq	.+16     	; 0x6f2 <pow+0x3c>
 6e2:	99 23       	and	r25, r25
 6e4:	4a f5       	brpl	.+82     	; 0x738 <pow+0x82>
 6e6:	ff 3f       	cpi	r31, 0xFF	; 255
 6e8:	e1 05       	cpc	r30, r1
 6ea:	31 05       	cpc	r19, r1
 6ec:	21 05       	cpc	r18, r1
 6ee:	19 f1       	breq	.+70     	; 0x736 <pow+0x80>
 6f0:	e8 94       	clt
 6f2:	08 94       	sec
 6f4:	e7 95       	ror	r30
 6f6:	d9 01       	movw	r26, r18
 6f8:	aa 23       	and	r26, r26
 6fa:	29 f4       	brne	.+10     	; 0x706 <pow+0x50>
 6fc:	ab 2f       	mov	r26, r27
 6fe:	be 2f       	mov	r27, r30
 700:	f8 5f       	subi	r31, 0xF8	; 248
 702:	d0 f3       	brcs	.-12     	; 0x6f8 <pow+0x42>
 704:	10 c0       	rjmp	.+32     	; 0x726 <pow+0x70>
 706:	ff 5f       	subi	r31, 0xFF	; 255
 708:	70 f4       	brcc	.+28     	; 0x726 <pow+0x70>
 70a:	a6 95       	lsr	r26
 70c:	e0 f7       	brcc	.-8      	; 0x706 <pow+0x50>
 70e:	f7 39       	cpi	r31, 0x97	; 151
 710:	50 f0       	brcs	.+20     	; 0x726 <pow+0x70>
 712:	19 f0       	breq	.+6      	; 0x71a <pow+0x64>
 714:	ff 3a       	cpi	r31, 0xAF	; 175
 716:	38 f4       	brcc	.+14     	; 0x726 <pow+0x70>
 718:	9f 77       	andi	r25, 0x7F	; 127
 71a:	9f 93       	push	r25
 71c:	0d d0       	rcall	.+26     	; 0x738 <pow+0x82>
 71e:	0f 90       	pop	r0
 720:	07 fc       	sbrc	r0, 7
 722:	90 58       	subi	r25, 0x80	; 128
 724:	08 95       	ret
 726:	46 f0       	brts	.+16     	; 0x738 <pow+0x82>
 728:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	80 e8       	ldi	r24, 0x80	; 128
 732:	9f e3       	ldi	r25, 0x3F	; 63
 734:	08 95       	ret
 736:	4f e7       	ldi	r20, 0x7F	; 127
 738:	9f 77       	andi	r25, 0x7F	; 127
 73a:	5f 93       	push	r21
 73c:	4f 93       	push	r20
 73e:	3f 93       	push	r19
 740:	2f 93       	push	r18
 742:	0e 94 a3 04 	call	0x946	; 0x946 <log>
 746:	2f 91       	pop	r18
 748:	3f 91       	pop	r19
 74a:	4f 91       	pop	r20
 74c:	5f 91       	pop	r21
 74e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__mulsf3>
 752:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <exp>

00000756 <round>:
 756:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 75a:	e8 f0       	brcs	.+58     	; 0x796 <round+0x40>
 75c:	9e 37       	cpi	r25, 0x7E	; 126
 75e:	e8 f0       	brcs	.+58     	; 0x79a <round+0x44>
 760:	96 39       	cpi	r25, 0x96	; 150
 762:	b8 f4       	brcc	.+46     	; 0x792 <round+0x3c>
 764:	9e 38       	cpi	r25, 0x8E	; 142
 766:	48 f4       	brcc	.+18     	; 0x77a <round+0x24>
 768:	67 2f       	mov	r22, r23
 76a:	78 2f       	mov	r23, r24
 76c:	88 27       	eor	r24, r24
 76e:	98 5f       	subi	r25, 0xF8	; 248
 770:	f9 cf       	rjmp	.-14     	; 0x764 <round+0xe>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	93 95       	inc	r25
 77a:	95 39       	cpi	r25, 0x95	; 149
 77c:	d0 f3       	brcs	.-12     	; 0x772 <round+0x1c>
 77e:	b6 2f       	mov	r27, r22
 780:	b1 70       	andi	r27, 0x01	; 1
 782:	6b 0f       	add	r22, r27
 784:	71 1d       	adc	r23, r1
 786:	81 1d       	adc	r24, r1
 788:	20 f4       	brcc	.+8      	; 0x792 <round+0x3c>
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	93 95       	inc	r25
 792:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_mintl>
 796:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_mpack>
 79a:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 79e:	29 f4       	brne	.+10     	; 0x7aa <round+0x54>
 7a0:	16 f0       	brts	.+4      	; 0x7a6 <round+0x50>
 7a2:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 7a6:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__fp_zero>
 7aa:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>

000007ae <exp>:
 7ae:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 7b2:	a8 f3       	brcs	.-22     	; 0x79e <round+0x48>
 7b4:	96 38       	cpi	r25, 0x86	; 134
 7b6:	a0 f7       	brcc	.-24     	; 0x7a0 <round+0x4a>
 7b8:	07 f8       	bld	r0, 7
 7ba:	0f 92       	push	r0
 7bc:	e8 94       	clt
 7be:	2b e3       	ldi	r18, 0x3B	; 59
 7c0:	3a ea       	ldi	r19, 0xAA	; 170
 7c2:	48 eb       	ldi	r20, 0xB8	; 184
 7c4:	5f e7       	ldi	r21, 0x7F	; 127
 7c6:	0e 94 04 03 	call	0x608	; 0x608 <__mulsf3_pse>
 7ca:	0f 92       	push	r0
 7cc:	0f 92       	push	r0
 7ce:	0f 92       	push	r0
 7d0:	4d b7       	in	r20, 0x3d	; 61
 7d2:	5e b7       	in	r21, 0x3e	; 62
 7d4:	0f 92       	push	r0
 7d6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <modf>
 7da:	e4 e5       	ldi	r30, 0x54	; 84
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	0e 94 32 04 	call	0x864	; 0x864 <__fp_powser>
 7e2:	4f 91       	pop	r20
 7e4:	5f 91       	pop	r21
 7e6:	ef 91       	pop	r30
 7e8:	ff 91       	pop	r31
 7ea:	e5 95       	asr	r30
 7ec:	ee 1f       	adc	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	49 f0       	breq	.+18     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f2:	fe 57       	subi	r31, 0x7E	; 126
 7f4:	e0 68       	ori	r30, 0x80	; 128
 7f6:	44 27       	eor	r20, r20
 7f8:	ee 0f       	add	r30, r30
 7fa:	44 1f       	adc	r20, r20
 7fc:	fa 95       	dec	r31
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <exp+0x4a>
 800:	41 95       	neg	r20
 802:	55 0b       	sbc	r21, r21
 804:	0e 94 65 04 	call	0x8ca	; 0x8ca <ldexp>
 808:	0f 90       	pop	r0
 80a:	07 fe       	sbrs	r0, 7
 80c:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <inverse>
 810:	08 95       	ret

00000812 <__fp_mintl>:
 812:	88 23       	and	r24, r24
 814:	71 f4       	brne	.+28     	; 0x832 <__fp_mintl+0x20>
 816:	77 23       	and	r23, r23
 818:	21 f0       	breq	.+8      	; 0x822 <__fp_mintl+0x10>
 81a:	98 50       	subi	r25, 0x08	; 8
 81c:	87 2b       	or	r24, r23
 81e:	76 2f       	mov	r23, r22
 820:	07 c0       	rjmp	.+14     	; 0x830 <__fp_mintl+0x1e>
 822:	66 23       	and	r22, r22
 824:	11 f4       	brne	.+4      	; 0x82a <__fp_mintl+0x18>
 826:	99 27       	eor	r25, r25
 828:	0d c0       	rjmp	.+26     	; 0x844 <__fp_mintl+0x32>
 82a:	90 51       	subi	r25, 0x10	; 16
 82c:	86 2b       	or	r24, r22
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	2a f0       	brmi	.+10     	; 0x83e <__fp_mintl+0x2c>
 834:	9a 95       	dec	r25
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	da f7       	brpl	.-10     	; 0x834 <__fp_mintl+0x22>
 83e:	88 0f       	add	r24, r24
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__fp_mpack>:
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	31 f0       	breq	.+12     	; 0x858 <__fp_mpack_finite+0xc>

0000084c <__fp_mpack_finite>:
 84c:	91 50       	subi	r25, 0x01	; 1
 84e:	20 f4       	brcc	.+8      	; 0x858 <__fp_mpack_finite+0xc>
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	88 0f       	add	r24, r24
 85a:	91 1d       	adc	r25, r1
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__fp_powser>:
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	1f 93       	push	r17
 86a:	0f 93       	push	r16
 86c:	ff 92       	push	r15
 86e:	ef 92       	push	r14
 870:	df 92       	push	r13
 872:	7b 01       	movw	r14, r22
 874:	8c 01       	movw	r16, r24
 876:	68 94       	set
 878:	06 c0       	rjmp	.+12     	; 0x886 <__fp_powser+0x22>
 87a:	da 2e       	mov	r13, r26
 87c:	ef 01       	movw	r28, r30
 87e:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3x>
 882:	fe 01       	movw	r30, r28
 884:	e8 94       	clt
 886:	a5 91       	lpm	r26, Z+
 888:	25 91       	lpm	r18, Z+
 88a:	35 91       	lpm	r19, Z+
 88c:	45 91       	lpm	r20, Z+
 88e:	55 91       	lpm	r21, Z+
 890:	a6 f3       	brts	.-24     	; 0x87a <__fp_powser+0x16>
 892:	ef 01       	movw	r28, r30
 894:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__addsf3x>
 898:	fe 01       	movw	r30, r28
 89a:	97 01       	movw	r18, r14
 89c:	a8 01       	movw	r20, r16
 89e:	da 94       	dec	r13
 8a0:	69 f7       	brne	.-38     	; 0x87c <__fp_powser+0x18>
 8a2:	df 90       	pop	r13
 8a4:	ef 90       	pop	r14
 8a6:	ff 90       	pop	r15
 8a8:	0f 91       	pop	r16
 8aa:	1f 91       	pop	r17
 8ac:	cf 91       	pop	r28
 8ae:	df 91       	pop	r29
 8b0:	08 95       	ret

000008b2 <inverse>:
 8b2:	9b 01       	movw	r18, r22
 8b4:	ac 01       	movw	r20, r24
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	80 e8       	ldi	r24, 0x80	; 128
 8bc:	9f e3       	ldi	r25, 0x3F	; 63
 8be:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__divsf3>
 8c2:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 8c6:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_mpack>

000008ca <ldexp>:
 8ca:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 8ce:	d8 f3       	brcs	.-10     	; 0x8c6 <inverse+0x14>
 8d0:	99 23       	and	r25, r25
 8d2:	c9 f3       	breq	.-14     	; 0x8c6 <inverse+0x14>
 8d4:	94 0f       	add	r25, r20
 8d6:	51 1d       	adc	r21, r1
 8d8:	a3 f3       	brvs	.-24     	; 0x8c2 <inverse+0x10>
 8da:	91 50       	subi	r25, 0x01	; 1
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	94 f0       	brlt	.+36     	; 0x904 <ldexp+0x3a>
 8e0:	59 f0       	breq	.+22     	; 0x8f8 <ldexp+0x2e>
 8e2:	88 23       	and	r24, r24
 8e4:	32 f0       	brmi	.+12     	; 0x8f2 <ldexp+0x28>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	c1 f7       	brne	.-16     	; 0x8e2 <ldexp+0x18>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	2c f7       	brge	.-54     	; 0x8c2 <inverse+0x10>
 8f8:	88 0f       	add	r24, r24
 8fa:	91 1d       	adc	r25, r1
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	ac f0       	brlt	.+42     	; 0x932 <ldexp+0x68>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	9c f0       	brlt	.+38     	; 0x932 <ldexp+0x68>
 90c:	bb 27       	eor	r27, r27
 90e:	86 95       	lsr	r24
 910:	77 95       	ror	r23
 912:	67 95       	ror	r22
 914:	b7 95       	ror	r27
 916:	08 f4       	brcc	.+2      	; 0x91a <ldexp+0x50>
 918:	b1 60       	ori	r27, 0x01	; 1
 91a:	93 95       	inc	r25
 91c:	c1 f7       	brne	.-16     	; 0x90e <ldexp+0x44>
 91e:	bb 0f       	add	r27, r27
 920:	58 f7       	brcc	.-42     	; 0x8f8 <ldexp+0x2e>
 922:	11 f4       	brne	.+4      	; 0x928 <ldexp+0x5e>
 924:	60 ff       	sbrs	r22, 0
 926:	e8 cf       	rjmp	.-48     	; 0x8f8 <ldexp+0x2e>
 928:	6f 5f       	subi	r22, 0xFF	; 255
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	8f 4f       	sbci	r24, 0xFF	; 255
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	e3 cf       	rjmp	.-58     	; 0x8f8 <ldexp+0x2e>
 932:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 936:	16 f0       	brts	.+4      	; 0x93c <ldexp+0x72>
 938:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_mpack>
 93c:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>
 940:	68 94       	set
 942:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>

00000946 <log>:
 946:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_splitA>
 94a:	a8 f3       	brcs	.-22     	; 0x936 <ldexp+0x6c>
 94c:	99 23       	and	r25, r25
 94e:	c1 f3       	breq	.-16     	; 0x940 <ldexp+0x76>
 950:	ae f3       	brts	.-22     	; 0x93c <ldexp+0x72>
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	1f 93       	push	r17
 958:	0f 93       	push	r16
 95a:	ff 92       	push	r15
 95c:	c9 2f       	mov	r28, r25
 95e:	dd 27       	eor	r29, r29
 960:	88 23       	and	r24, r24
 962:	2a f0       	brmi	.+10     	; 0x96e <log+0x28>
 964:	21 97       	sbiw	r28, 0x01	; 1
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	da f7       	brpl	.-10     	; 0x964 <log+0x1e>
 96e:	20 e0       	ldi	r18, 0x00	; 0
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	40 e8       	ldi	r20, 0x80	; 128
 974:	5f eb       	ldi	r21, 0xBF	; 191
 976:	9f e3       	ldi	r25, 0x3F	; 63
 978:	88 39       	cpi	r24, 0x98	; 152
 97a:	20 f0       	brcs	.+8      	; 0x984 <log+0x3e>
 97c:	80 3e       	cpi	r24, 0xE0	; 224
 97e:	38 f0       	brcs	.+14     	; 0x98e <log+0x48>
 980:	21 96       	adiw	r28, 0x01	; 1
 982:	8f 77       	andi	r24, 0x7F	; 127
 984:	0e 94 be 01 	call	0x37c	; 0x37c <__addsf3>
 988:	ec e7       	ldi	r30, 0x7C	; 124
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	04 c0       	rjmp	.+8      	; 0x996 <log+0x50>
 98e:	0e 94 be 01 	call	0x37c	; 0x37c <__addsf3>
 992:	e9 ea       	ldi	r30, 0xA9	; 169
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	0e 94 32 04 	call	0x864	; 0x864 <__fp_powser>
 99a:	8b 01       	movw	r16, r22
 99c:	be 01       	movw	r22, r28
 99e:	ec 01       	movw	r28, r24
 9a0:	fb 2e       	mov	r15, r27
 9a2:	6f 57       	subi	r22, 0x7F	; 127
 9a4:	71 09       	sbc	r23, r1
 9a6:	75 95       	asr	r23
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 0b       	sbc	r24, r24
 9ac:	99 0b       	sbc	r25, r25
 9ae:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__floatsisf>
 9b2:	28 e1       	ldi	r18, 0x18	; 24
 9b4:	32 e7       	ldi	r19, 0x72	; 114
 9b6:	41 e3       	ldi	r20, 0x31	; 49
 9b8:	5f e3       	ldi	r21, 0x3F	; 63
 9ba:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3x>
 9be:	af 2d       	mov	r26, r15
 9c0:	98 01       	movw	r18, r16
 9c2:	ae 01       	movw	r20, r28
 9c4:	ff 90       	pop	r15
 9c6:	0f 91       	pop	r16
 9c8:	1f 91       	pop	r17
 9ca:	cf 91       	pop	r28
 9cc:	df 91       	pop	r29
 9ce:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__addsf3x>
 9d2:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_round>

000009d6 <modf>:
 9d6:	fa 01       	movw	r30, r20
 9d8:	dc 01       	movw	r26, r24
 9da:	aa 0f       	add	r26, r26
 9dc:	bb 1f       	adc	r27, r27
 9de:	9b 01       	movw	r18, r22
 9e0:	ac 01       	movw	r20, r24
 9e2:	bf 57       	subi	r27, 0x7F	; 127
 9e4:	28 f4       	brcc	.+10     	; 0x9f0 <modf+0x1a>
 9e6:	22 27       	eor	r18, r18
 9e8:	33 27       	eor	r19, r19
 9ea:	44 27       	eor	r20, r20
 9ec:	50 78       	andi	r21, 0x80	; 128
 9ee:	20 c0       	rjmp	.+64     	; 0xa30 <modf+0x5a>
 9f0:	b7 51       	subi	r27, 0x17	; 23
 9f2:	90 f4       	brcc	.+36     	; 0xa18 <modf+0x42>
 9f4:	ab 2f       	mov	r26, r27
 9f6:	00 24       	eor	r0, r0
 9f8:	46 95       	lsr	r20
 9fa:	37 95       	ror	r19
 9fc:	27 95       	ror	r18
 9fe:	01 1c       	adc	r0, r1
 a00:	a3 95       	inc	r26
 a02:	d2 f3       	brmi	.-12     	; 0x9f8 <modf+0x22>
 a04:	00 20       	and	r0, r0
 a06:	71 f0       	breq	.+28     	; 0xa24 <modf+0x4e>
 a08:	22 0f       	add	r18, r18
 a0a:	33 1f       	adc	r19, r19
 a0c:	44 1f       	adc	r20, r20
 a0e:	b3 95       	inc	r27
 a10:	da f3       	brmi	.-10     	; 0xa08 <modf+0x32>
 a12:	0e d0       	rcall	.+28     	; 0xa30 <modf+0x5a>
 a14:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__subsf3>
 a18:	61 30       	cpi	r22, 0x01	; 1
 a1a:	71 05       	cpc	r23, r1
 a1c:	a0 e8       	ldi	r26, 0x80	; 128
 a1e:	8a 07       	cpc	r24, r26
 a20:	b9 46       	sbci	r27, 0x69	; 105
 a22:	30 f4       	brcc	.+12     	; 0xa30 <modf+0x5a>
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	66 27       	eor	r22, r22
 a2a:	77 27       	eor	r23, r23
 a2c:	88 27       	eor	r24, r24
 a2e:	90 78       	andi	r25, 0x80	; 128
 a30:	30 96       	adiw	r30, 0x00	; 0
 a32:	21 f0       	breq	.+8      	; 0xa3c <modf+0x66>
 a34:	20 83       	st	Z, r18
 a36:	31 83       	std	Z+1, r19	; 0x01
 a38:	42 83       	std	Z+2, r20	; 0x02
 a3a:	53 83       	std	Z+3, r21	; 0x03
 a3c:	08 95       	ret

00000a3e <__divsf3>:
 a3e:	0e 94 33 05 	call	0xa66	; 0xa66 <__divsf3x>
 a42:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_round>
 a46:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_pscB>
 a4a:	58 f0       	brcs	.+22     	; 0xa62 <__divsf3+0x24>
 a4c:	0e 94 a6 02 	call	0x54c	; 0x54c <__fp_pscA>
 a50:	40 f0       	brcs	.+16     	; 0xa62 <__divsf3+0x24>
 a52:	29 f4       	brne	.+10     	; 0xa5e <__divsf3+0x20>
 a54:	5f 3f       	cpi	r21, 0xFF	; 255
 a56:	29 f0       	breq	.+10     	; 0xa62 <__divsf3+0x24>
 a58:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 a5c:	51 11       	cpse	r21, r1
 a5e:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 a62:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_nan>

00000a66 <__divsf3x>:
 a66:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_split3>
 a6a:	68 f3       	brcs	.-38     	; 0xa46 <__divsf3+0x8>

00000a6c <__divsf3_pse>:
 a6c:	99 23       	and	r25, r25
 a6e:	b1 f3       	breq	.-20     	; 0xa5c <__divsf3+0x1e>
 a70:	55 23       	and	r21, r21
 a72:	91 f3       	breq	.-28     	; 0xa58 <__divsf3+0x1a>
 a74:	95 1b       	sub	r25, r21
 a76:	55 0b       	sbc	r21, r21
 a78:	bb 27       	eor	r27, r27
 a7a:	aa 27       	eor	r26, r26
 a7c:	62 17       	cp	r22, r18
 a7e:	73 07       	cpc	r23, r19
 a80:	84 07       	cpc	r24, r20
 a82:	38 f0       	brcs	.+14     	; 0xa92 <__divsf3_pse+0x26>
 a84:	9f 5f       	subi	r25, 0xFF	; 255
 a86:	5f 4f       	sbci	r21, 0xFF	; 255
 a88:	22 0f       	add	r18, r18
 a8a:	33 1f       	adc	r19, r19
 a8c:	44 1f       	adc	r20, r20
 a8e:	aa 1f       	adc	r26, r26
 a90:	a9 f3       	breq	.-22     	; 0xa7c <__divsf3_pse+0x10>
 a92:	35 d0       	rcall	.+106    	; 0xafe <__divsf3_pse+0x92>
 a94:	0e 2e       	mov	r0, r30
 a96:	3a f0       	brmi	.+14     	; 0xaa6 <__divsf3_pse+0x3a>
 a98:	e0 e8       	ldi	r30, 0x80	; 128
 a9a:	32 d0       	rcall	.+100    	; 0xb00 <__divsf3_pse+0x94>
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	50 40       	sbci	r21, 0x00	; 0
 aa0:	e6 95       	lsr	r30
 aa2:	00 1c       	adc	r0, r0
 aa4:	ca f7       	brpl	.-14     	; 0xa98 <__divsf3_pse+0x2c>
 aa6:	2b d0       	rcall	.+86     	; 0xafe <__divsf3_pse+0x92>
 aa8:	fe 2f       	mov	r31, r30
 aaa:	29 d0       	rcall	.+82     	; 0xafe <__divsf3_pse+0x92>
 aac:	66 0f       	add	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	bb 1f       	adc	r27, r27
 ab4:	26 17       	cp	r18, r22
 ab6:	37 07       	cpc	r19, r23
 ab8:	48 07       	cpc	r20, r24
 aba:	ab 07       	cpc	r26, r27
 abc:	b0 e8       	ldi	r27, 0x80	; 128
 abe:	09 f0       	breq	.+2      	; 0xac2 <__divsf3_pse+0x56>
 ac0:	bb 0b       	sbc	r27, r27
 ac2:	80 2d       	mov	r24, r0
 ac4:	bf 01       	movw	r22, r30
 ac6:	ff 27       	eor	r31, r31
 ac8:	93 58       	subi	r25, 0x83	; 131
 aca:	5f 4f       	sbci	r21, 0xFF	; 255
 acc:	3a f0       	brmi	.+14     	; 0xadc <__divsf3_pse+0x70>
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	51 05       	cpc	r21, r1
 ad2:	78 f0       	brcs	.+30     	; 0xaf2 <__divsf3_pse+0x86>
 ad4:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_inf>
 ad8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_szero>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	e4 f3       	brlt	.-8      	; 0xad8 <__divsf3_pse+0x6c>
 ae0:	98 3e       	cpi	r25, 0xE8	; 232
 ae2:	d4 f3       	brlt	.-12     	; 0xad8 <__divsf3_pse+0x6c>
 ae4:	86 95       	lsr	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	f7 95       	ror	r31
 aee:	9f 5f       	subi	r25, 0xFF	; 255
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__divsf3_pse+0x78>
 af2:	88 0f       	add	r24, r24
 af4:	91 1d       	adc	r25, r1
 af6:	96 95       	lsr	r25
 af8:	87 95       	ror	r24
 afa:	97 f9       	bld	r25, 7
 afc:	08 95       	ret
 afe:	e1 e0       	ldi	r30, 0x01	; 1
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	bb 1f       	adc	r27, r27
 b08:	62 17       	cp	r22, r18
 b0a:	73 07       	cpc	r23, r19
 b0c:	84 07       	cpc	r24, r20
 b0e:	ba 07       	cpc	r27, r26
 b10:	20 f0       	brcs	.+8      	; 0xb1a <__divsf3_pse+0xae>
 b12:	62 1b       	sub	r22, r18
 b14:	73 0b       	sbc	r23, r19
 b16:	84 0b       	sbc	r24, r20
 b18:	ba 0b       	sbc	r27, r26
 b1a:	ee 1f       	adc	r30, r30
 b1c:	88 f7       	brcc	.-30     	; 0xb00 <__divsf3_pse+0x94>
 b1e:	e0 95       	com	r30
 b20:	08 95       	ret

00000b22 <_exit>:
 b22:	f8 94       	cli

00000b24 <__stop_program>:
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <__stop_program>
